local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield', true))()
end)

if not success or not Rayfield then
    warn("Failed to load Rayfield UI Library!")
    return
end

local Window = Rayfield:CreateWindow({
   Name = "Dead Rails v1.3",
   Icon = 0,
   LoadingTitle = "Dead Rails loading",
   LoadingSubtitle = "by reallance0424",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FileName = "Big Hub"
   },
   KeySystem = false
})

local MainTab = Window:CreateTab("Main", 4483362458)

local RunService = game:GetService("RunService")
local Cam = workspace.CurrentCamera
local Player = game:GetService("Players").LocalPlayer

local validNPCs = {}
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

local function isNPC(obj)
    return obj:IsA("Model") 
        and obj:FindFirstChild("Humanoid")
        and obj.Humanoid.Health > 0
        and obj:FindFirstChild("Head")
        and obj:FindFirstChild("HumanoidRootPart")
        and not game:GetService("Players"):GetPlayerFromCharacter(obj)
end

local function updateNPCs()
    local tempTable = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if isNPC(obj) then
            tempTable[obj] = true
        end
    end
    for i = #validNPCs, 1, -1 do
        if not tempTable[validNPCs[i]] then
            table.remove(validNPCs, i)
        end
    end
    for obj in pairs(tempTable) do
        if not table.find(validNPCs, obj) then
            table.insert(validNPCs, obj)
        end
    end
end

local function getTarget()
    local nearest, minDistance = nil, math.huge
    local viewportCenter = Cam.ViewportSize / 2
    raycastParams.FilterDescendantsInstances = {Player.Character}
    
    for _, npc in ipairs(validNPCs) do
        local predictedPos = npc.HumanoidRootPart.Position
        local screenPos, visible = Cam:WorldToViewportPoint(predictedPos)
        if visible and screenPos.Z > 0 then
            local distance = (Vector2.new(screenPos.X, screenPos.Y) - viewportCenter).Magnitude
            if distance < minDistance then
                minDistance = distance
                nearest = npc
            end
        end
    end
    return nearest
end

local function aim(targetPosition)
    local currentCF = Cam.CFrame
    local newLookVector = currentCF.LookVector:Lerp((targetPosition - currentCF.Position).Unit, 0.581)
    Cam.CFrame = CFrame.new(currentCF.Position, currentCF.Position + newLookVector)
end

local aimbotEnabled = false

RunService.Heartbeat:Connect(function()
    updateNPCs()
    if aimbotEnabled then
        local target = getTarget()
        if target then
            aim(target.HumanoidRootPart.Position)
        end
    end
end)

local aimbotToggle = MainTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "AimbotToggle",
    Callback = function(Value)
        aimbotEnabled = Value
    end
})

local ESPHandles = {}
local ESPItemsEnabled = false
local ESPMobsEnabled = false

local function CreateESP(object, color)
    if not object or not object.PrimaryPart then return end

    if ESPHandles[object] then return end -- Prevent duplicate ESP

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = object
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.Parent = object

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Billboard"
    billboard.Adornee = object.PrimaryPart
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = object

    local textLabel = Instance.new("TextLabel")
    textLabel.Text = object.Name
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.TextColor3 = color
    textLabel.BackgroundTransparency = 1
    textLabel.TextSize = 7
    textLabel.Parent = billboard

    ESPHandles[object] = {Highlight = highlight, Billboard = billboard}
end

local function ClearESP(category)
    for obj, handles in pairs(ESPHandles) do
        if category == "Items" and handles.Color == Color3.new(1, 0, 0) then
            if handles.Highlight then handles.Highlight:Destroy() end
            if handles.Billboard then handles.Billboard:Destroy() end
            ESPHandles[obj] = nil
        elseif category == "Mobs" and handles.Color ~= Color3.new(1, 0, 0) then
            if handles.Highlight then handles.Highlight:Destroy() end
            if handles.Billboard then handles.Billboard:Destroy() end
            ESPHandles[obj] = nil
        end
    end
end

local function UpdateESPItems()
    ClearESP("Items")
    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                CreateESP(item, Color3.new(1, 0, 0)) -- Red for Items
            end
        end
    end
end

local function UpdateESPMobs()
    ClearESP("Mobs")
    
    -- ESP for Animals
    local baseplates = workspace:FindFirstChild("Baseplates")
    if baseplates and #baseplates:GetChildren() >= 2 then
        local secondBaseplate = baseplates:GetChildren()[2]
        local centerBaseplate = secondBaseplate and secondBaseplate:FindFirstChild("CenterBaseplate")
        local animals = centerBaseplate and centerBaseplate:FindFirstChild("Animals")
        if animals then
            for _, animal in ipairs(animals:GetDescendants()) do
                if animal:IsA("Model") then
                    CreateESP(animal, Color3.new(1, 0, 1)) -- Purple for Animals
                end
            end
        end
    end

    -- ESP for Night Enemies
    local nightEnemies = workspace:FindFirstChild("NightEnemies")
    if nightEnemies then
        for _, enemy in ipairs(nightEnemies:GetDescendants()) do
            if enemy:IsA("Model") then
                CreateESP(enemy, Color3.new(0, 0, 1)) -- Blue for Night Enemies
            end
        end
    end

    -- ESP for Zombies
    local destroyedHouse = workspace:FindFirstChild("RandomBuildings") and workspace.RandomBuildings:FindFirstChild("DestroyedHouse")
    local zombiePart = destroyedHouse and destroyedHouse:FindFirstChild("StandaloneZombiePart")
    local zombies = zombiePart and zombiePart:FindFirstChild("Zombies")
    if zombies then
        for _, zombie in ipairs(zombies:GetChildren()) do
            if zombie:IsA("Model") then
                CreateESP(zombie, Color3.new(0, 1, 0)) -- Green for Zombies
            end
        end
    end
end

local function AutoUpdateESPItems()
    while ESPItemsEnabled do
        UpdateESPItems()
        wait()
    end
end

local function AutoUpdateESPMobs()
    while ESPMobsEnabled do
        UpdateESPMobs()
        wait()
    end
end

local Section = Tab:CreateSection("May cause lag")
local espItemsToggle = MainTab:CreateToggle({
    Name = "ESP Items",
    CurrentValue = false,
    Flag = "ESPItemsToggle",
    Callback = function(Value)
        ESPItemsEnabled = Value
        if Value then
            UpdateESPItems()
            coroutine.wrap(AutoUpdateESPItems)()
        else
            ClearESP("Items")
        end
    end
})

local espMobsToggle = MainTab:CreateToggle({
    Name = "ESP Mobs",
    CurrentValue = false,
    Flag = "ESPMobsToggle",
    Callback = function(Value)
        ESPMobsEnabled = Value
        if Value then
            UpdateESPMobs()
            coroutine.wrap(AutoUpdateESPMobs)()
        else
            ClearESP("Mobs")
        end
    end
})

local OthersTab = Window:CreateTab("Others", 4483362458)

local isNoclipping = false

local function toggleNoclip(state)
    isNoclipping = state
    task.spawn(function()
        while isNoclipping do
            for _, part in pairs(Player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
            task.wait()
        end
    end)
end

OthersTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = toggleNoclip
})

local InfiniteJumpEnabled = false
local function toggleInfiniteJump(state)
    InfiniteJumpEnabled = state
    game:GetService("UserInputService").JumpRequest:Connect(function()
        if InfiniteJumpEnabled then
            Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
        end
    end)
end

OthersTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJump",
    Callback = toggleInfiniteJump
})

local speedEnabled = false
local speedValue = 16

OthersTab:CreateToggle({
    Name = "Enable Speed",
    CurrentValue = false,
    Flag = "SpeedToggle",
    Callback = function(Value)
        speedEnabled = Value
        if speedEnabled then
            Player.Character.Humanoid.WalkSpeed = speedValue
        else
            Player.Character.Humanoid.WalkSpeed = 16
        end
    end
})

OthersTab:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 510},
    Increment = 1,
    Suffix = " Walkspeed",
    CurrentValue = 16,
    Flag = "SpeedSlider",
    Callback = function(v)
        speedValue = v
        if speedEnabled then
            Player.Character.Humanoid.WalkSpeed = speedValue
        end
    end
})

OthersTab:CreateButton({
    Name = "Unlock Third Person",
    Callback = function()
        Player.CameraMaxZoomDistance = 200
        Player.CameraMode = Enum.CameraMode.Classic
    end
})

local Tab = Window:CreateTab("Bring Item", 4483362458) 

local function GetItemNames()
    local items = {}
    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                table.insert(items, item.Name)
            end
        end
    else
        warn("RuntimeItems folder not found!")
    end
    return items
end

local Dropdown = Tab:CreateDropdown({
   Name = "Choose item",
   Options = GetItemNames(), 
   CurrentOption = "Select an item",
   MultipleOptions = false,
   Flag = "ItemDropdown", 
   Callback = function(selectedItem)
       if type(selectedItem) == "table" then
           selectedItem = selectedItem[1] 
       end
   end,
})

local RefreshButton = Tab:CreateButton({
   Name = "Refresh Items",
   Callback = function()
       Dropdown:Refresh(GetItemNames())
   end,
})

local collectButton = Tab:CreateButton({
   Name = "Collect Selected Item",
   Callback = function()
       local selectedItemName = Dropdown.CurrentOption
       if type(selectedItemName) == "table" then
           selectedItemName = selectedItemName[1] 
       end

       if selectedItemName == "Select an item" then
           warn("No item selected!")
           return
       end

       local runtimeItems = workspace:FindFirstChild("RuntimeItems")
       if not runtimeItems then
           warn("RuntimeItems folder not found!")
           return
       end

       local selectedItem
       for _, item in ipairs(runtimeItems:GetDescendants()) do
           if item:IsA("Model") and item.Name == selectedItemName then
               selectedItem = item
               break
           end
       end

       if not selectedItem then
           warn("Item not found in RuntimeItems:", selectedItemName)
           return
       end

       local Players = game:GetService("Players")
       local LocalPlayer = Players.LocalPlayer
       if not LocalPlayer then
           warn("LocalPlayer not found!")
           return
       end

       local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
       local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

       if not selectedItem.PrimaryPart then
           warn(selectedItem.Name .. " has no PrimaryPart and cannot be moved.")
           return
       end

       selectedItem:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + Vector3.new(0, 1, 0))
       print("Collected:", selectedItem.Name)
   end,
})

local Section = Tab:CreateSection("May cause lag or crash")
local collectAllButton = Tab:CreateButton({
   Name = "Collect All Items",
   Callback = function()
       local runtimeItems = workspace:FindFirstChild("RuntimeItems")
       if not runtimeItems then
           warn("RuntimeItems folder not found!")
           return
       end

       local ps = game:GetService("Players").LocalPlayer
       local ch = ps.Character or ps.CharacterAdded:Wait()
       local HumanoidRootPart = ch:WaitForChild("HumanoidRootPart")

       for _, item in ipairs(runtimeItems:GetDescendants()) do
           if item:IsA("Model") then
               if item.PrimaryPart then
                   local offset = HumanoidRootPart.CFrame.LookVector * 5
                   item:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + offset)
               else
                   warn(item.Name .. " has no PrimaryPart .")
               end
           end
       end 
   end,
})
